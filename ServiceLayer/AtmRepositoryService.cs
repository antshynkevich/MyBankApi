using System.Diagnostics;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using DataEntityAndAccessLayer;
using DataEntityAndAccessLayer.Entities.Atm;
using Microsoft.EntityFrameworkCore;
using ServiceLayer.DTO.Atm;
using ServiceLayer.Mapping;

namespace ServiceLayer;

public class AtmRepositoryService
{
    private readonly BankDbContext _context;
    private readonly IMapper _mapper;

    public AtmRepositoryService(BankDbContext context, IMapper mapper)
    {
        _context = context;
        _mapper = mapper;
    }

    public async Task<List<Atm>> GetAllAtms()
    {
        var stopwatch = Stopwatch.StartNew();
        var atmList = await _context.Atms
            .AsSplitQuery()
            .Include(atm => atm.AtmType)
            .Include(atm => atm.AtmAvailability)
            .ThenInclude(av => av.AtmStandardAvailability)
            .ThenInclude(stav => stav.Days)
            .Include(atm => atm.AtmCardSchemes)
            .Include(atm => atm.AtmServices)
            .Include(atm => atm.ContactDetails)
            .AsNoTracking()
            .ToListAsync();

        Console.WriteLine($"Request to DB in ms = { stopwatch.ElapsedMilliseconds }");
        return atmList;
    }

    public async Task<List<AtmDto>> TakeTwenty()
    {
        var stopwatch = Stopwatch.StartNew();
        var atmsDto = await _context.Atms
            .Take(20)
            .ProjectTo<AtmDto>(_mapper.ConfigurationProvider)
            .ToListAsync();
        Console.WriteLine($"Request to DB in ms = {stopwatch.ElapsedMilliseconds}");
        return atmsDto;
    }


    public async Task AddAtmsToDb(JsonAutogeneratedClass data)
    {
        var atmsArray = data.Data.ATM;
        var atmsMapToDb = new Atm[atmsArray.Length];
        var converter = new AtmMapperFromJson(_context);

        for (int i = 0; i < atmsArray.Length; i++)
        {
            var jsonObj = atmsArray[i];
            var atmToDb = await converter.ConvertToEntity(jsonObj);
            foreach (var atmService in atmToDb.AtmServices)
            {
                atmService.Atms.Add(atmToDb);
            }

            foreach (var cardScheme in atmToDb.AtmCardSchemes)
            {
                cardScheme.Atms.Add(atmToDb);
            }

            atmToDb.AtmType?.Atms.Add(atmToDb);

            atmsMapToDb[i] = atmToDb;
        }

        await _context.Atms.AddRangeAsync(atmsMapToDb);
        await _context.SaveChangesAsync();
    }
}
